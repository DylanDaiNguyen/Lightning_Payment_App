#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var cookieParser = require('cookie-parser');
var open = require('open');
const http = require('http');
const fs = require('fs');
const ngrok = require('ngrok');

/*const options = {
  pfx: fs.readFileSync('../dylanblockchain.pfx'),
  passphrase: 'Backintime123'
};*/

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000'); //Assign App Port here
app.set('port', port);
app.use(cookieParser());
/**
 * Create HTTPS server.
 */

var server = http.createServer(app);

var endpoint =''

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */


function onListening() {
  ngrok.connect(3000).then(url => {
    endpoint = url;
    //open(endpoint);   Open the App on default browser
    console.log("App is open on: ",endpoint);
    exports.endpoint = endpoint;
  })
}
